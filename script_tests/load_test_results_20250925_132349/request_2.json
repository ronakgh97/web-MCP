{"responseId":931243995,"message":"Search results found","userQuery":"springAI documentation","searchResultList":[{"success":true,"source":"https://docs.spring.io/spring-ai/reference/index.html","snippet":"Introduction :: Spring AI Reference","content":"Edit this Page GitHub Project Stack Overflow Spring AI Overview Introduction The Spring AI project aims to streamline the development of applications that incorporate artificial intelligence functionality without unnecessary complexity. The project draws inspiration from notable Python projects, such as LangChain and LlamaIndex, but Spring AI is not a direct port of those projects. The project was founded with the belief that the next wave of Generative AI applications will not be only for Python developers but will be ubiquitous across many programming languages. Spring AI addresses the fundamental challenge of AI integration: Connecting your enterprise Data and APIs with AI Models. Spring AI provides abstractions that serve as the foundation for developing AI applications. These abstractions have multiple implementations, enabling easy component swapping with minimal code changes. Spring AI provides the following features: Portable API support across AI providers for Chat, text-to-image, and Embedding models. Both synchronous and streaming API options are supported. Access to model-specific features is also available. Support for all major AI Model providers such as Anthropic, OpenAI, Microsoft, Amazon, Google, and Ollama. Supported model types include: Chat Completion Embedding Text to Image Audio Transcription Text to Speech Moderation Structured Outputs - Mapping of AI Model output to POJOs. Support for all major Vector Database providers such as Apache Cassandra, Azure Cosmos DB, Azure Vector Search, Chroma, Elasticsearch, GemFire, MariaDB, Milvus, MongoDB Atlas, Neo4j, OpenSearch, Oracle, PostgreSQL/PGVector, PineCone, Qdrant, Redis, SAP Hana, Typesense and Weaviate. Portable API across Vector Store providers, including a novel SQL-like metadata filter API. Tools/Function Calling - Permits the model to request the execution of client-side tools and functions, thereby accessing necessary real-time information as required and taking action. Observability - Provides insights into AI-related operations. Document ingestion ETL framework for Data Engineering. AI Model Evaluation - Utilities to help evaluate generated content and protect against hallucinated response. Spring Boot Auto Configuration and Starters for AI Models and Vector Stores. ChatClient API - Fluent API for communicating with AI Chat Models, idiomatically similar to the WebClient and RestClient APIs. Advisors API - Encapsulates recurring Generative AI patterns, transforms data sent to and from Language Models (LLMs), and provides portability across various models and use cases. Support for Chat Conversation Memory and Retrieval Augmented Generation (RAG). This feature set lets you implement common use cases, such as “Q&A over your documentation” or “Chat with your documentation.” The concepts section provides a high-level overview of AI concepts and their representation in Spring AI. The Getting Started section shows you how to create your first AI application. Subsequent sections delve into each component and common use cases with a code-focused approach. AI Concepts","error":null},{"success":true,"source":"https://github.com/spring-projects/spring-ai","snippet":"GitHub - spring-projects/spring-ai: An Application Framework for AI ...","content":"spring-projects / spring-ai Public Notifications Fork 1.9k Star 6.8k Code Issues 698 Pull requests 187 Discussions Actions Projects Security Insights spring-projects/spring-ai  main Branches Tags Code Folders and files Name Last commit message Last commit date Latest commit alxkm test: Add missing operator and edge case tests for AzureAiSearchFilte… c796cbd  ·  History 2,748 Commits .github Fix maven command in documentation upload action .mvn Introduce checkstyle plugin advisors/spring-ai-advisors-vector-store refactor: Simplifies VectorStoreChatMemoryAdvisor code auto-configurations Add to Google GenAI (Gemini) : Add extended token usage metadata and … document-readers Checkstyle fixes mcp adding AOT support for MCP annotations (#4427) memory/repository perf: use AssistantMessage#builder() models test: Add robust null safety and configuration testing for Azure Open… spring-ai-bom Add Google GenAI artifact entries to Spring AI BOM spring-ai-client-chat refactor: simplify assistant message extraction using Optional chaining spring-ai-commons fix: Fix wrong checkstyle automated changes spring-ai-docs Correct class reference (#4466) spring-ai-integration-tests Next development version spring-ai-model adding AOT support for MCP annotations (#4427) spring-ai-rag test: Add unit tests for Query class validation and equality behavior (… spring-ai-retry GH-4082: Fix ResourceAccessException retry for network connectivity e… spring-ai-spring-boot-docker-compose Add docker/mcp-gateway docker compose service connection spring-ai-spring-boot-starters feat: Add annotation-based configuration support for MCP clients and … spring-ai-spring-boot-testcontainers Add Testcontainers Service Connection support for docker/mcp-gateway spring-ai-spring-cloud-bindings test: Add comprehensive test coverage for runtime hints and bindings … spring-ai-template-st chore: remove unnecessary null checks in template variable validation (… spring-ai-test Fix typos in comments and improve documentation (#3936) spring-ai-vector-store test: Add comprehensive test coverage for observation and vector stor… src minor vs code fomatting configs vector-stores test: Add missing operator and edge case tests for AzureAiSearchFilte… .editorconfig Introduce checkstyle plugin .gitattributes Add local, Transformers EmbeddingClient .gitignore build: code cleanup CONTRIBUTING.adoc docs : corrected git log command (#4272) LICENSE.txt iniital maven build system README.md Add 'enable' for bedrock cohere and chat propertites mvnw Introduce checkstyle plugin mvnw.cmd iniital maven build system pom.xml Updates couchbase client sdk settings.xml Restore settings.xml file for CI builds Repository files navigation README Code of conduct Contributing Apache-2.0 license Security Spring AI The Spring AI project provides a Spring-friendly API and abstractions for developing AI applications. Its goal is to apply to the AI domain Spring ecosystem design principles such as portability and modular design and promote using POJOs as the building blocks of an application to the AI domain. At its core, Spring AI addresses the fundamental challenge of AI integration: Connecting your enterprise Data and APIs with the AI Models. The project draws inspiration from notable Python projects, such as LangChain and LlamaIndex, but Spring AI is not a direct port of those projects. The project was founded with the belief that the next wave of Generative AI applications will not be only for Python developers but will be ubiquitous across many programming languages. You can check out the blog post Why Spring AI for additional motivations. This is a high level feature overview. You can find more details in the Reference Documentation Support for all major AI Model providers such as Anthropic, OpenAI, Microsoft, Amazon, Google, and Ollama. Supported model types include: Chat Completion Embedding Text to Image Audio Transcription Text to Speech Moderation Latest Models: GPT-5, and other cutting-edge models for advanced AI applications. Portable API support across AI providers for both synchronous and streaming options. Access to model-specific features is also available. Structured Outputs - Mapping of AI Model output to POJOs. Support for all major Vector Database providers such as Apache Cassandra, Azure Vector Search, Chroma, Elasticsearch, Milvus, MongoDB Atlas, MariaDB, Neo4j, Oracle, PostgreSQL/PGVector, PineCone, Qdrant, Redis, and Weaviate. Portable API across Vector Store providers, including a novel SQL-like metadata filter API. Tools/Function Calling - permits the model to request the execution of client-side tools and functions, thereby accessing necessary real-time information as required. Observability - Provides insights into AI-related operations. Document injection ETL framework for Data Engineering. AI Model Evaluation - Utilities to help evaluate generated content and protect against hallucinated response. ChatClient API - Fluent API for communicating with AI Chat Models, idiomatically similar to the WebClient and RestClient APIs. Advisors API - Encapsulates recurring Generative AI patterns, transforms data sent to and from Language Models (LLMs), and provides portability across various models and use cases. Support for Chat Conversation Memory and Retrieval Augmented Generation (RAG). Spring Boot Auto Configuration and Starters for all AI Models and Vector Stores - use the start.spring.io to select the Model or Vector-store of choice. Getting Started Please refer to...","error":null}],"success":true,"executionTimeMs":24479,"resultCount":2}